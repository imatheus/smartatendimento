import React, { useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Paper,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  Button,
  Tab,
  Tabs,
  TabPanel,
  useTheme
} from '@material-ui/core';
import {
  ExpandMore as ExpandMoreIcon,
  AccountTree as FlowchartIcon,
  Settings as SettingsIcon,
  School as TrainingIcon,
  Message as MessageIcon,
  SmartToy as RobotIcon,
  SupervisorAccount as ControlIcon,
  ArrowDownward as ArrowIcon,
  CheckCircle as CheckIcon,
  Warning as WarningIcon,
  Pause as PauseIcon,
  PlayArrow as PlayIcon,
  Person as PersonIcon
} from '@material-ui/icons';
import { makeStyles } from '@material-ui/core/styles';
import CodeBlock from '../components/CodeBlock';
import { useCustomTheme } from '../../../context/Theme/ThemeContext';

const useStyles = makeStyles((theme) => ({
  section: {
    padding: theme.spacing(3),
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary
  },
  title: {
    color: theme.palette.primary.main,
    fontWeight: 700,
    marginBottom: theme.spacing(2)
  },
  subtitle: {
    color: theme.palette.text.primary,
    fontWeight: 600,
    marginTop: theme.spacing(3),
    marginBottom: theme.spacing(2)
  },
  flowStep: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: `1px solid ${theme.palette.divider}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(2),
    marginBottom: theme.spacing(2),
    textAlign: 'center',
    transition: 'all 0.3s ease',
    '&:hover': {
      borderColor: theme.palette.primary.main,
      transform: 'translateY(-2px)',
      boxShadow: `0 4px 12px ${theme.palette.primary.main}33`
    }
  },
  flowArrow: {
    textAlign: 'center',
    color: theme.palette.primary.main,
    fontSize: '2rem',
    margin: theme.spacing(1, 0)
  },
  decisionBox: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: '2px solid #ff9800',
    borderRadius: '50px',
    padding: theme.spacing(2),
    textAlign: 'center',
    margin: theme.spacing(2, 0)
  },
  yesPath: {
    backgroundColor: theme.palette.type === 'dark' ? '#1b2e1b' : '#e8f5e8',
    border: '1px solid #4caf50',
    borderRadius: theme.spacing(1),
    padding: theme.spacing(1),
    margin: theme.spacing(1)
  },
  noPath: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d1810' : '#ffeaea',
    border: '1px solid #f44336',
    borderRadius: theme.spacing(1),
    padding: theme.spacing(1),
    margin: theme.spacing(1)
  },
  stageCard: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: `1px solid ${theme.palette.primary.main}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(2),
    marginBottom: theme.spacing(2)
  },
  stageTitle: {
    color: theme.palette.primary.main,
    fontWeight: 600,
    marginBottom: theme.spacing(1)
  },
  sequenceStep: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: `1px solid ${theme.palette.divider}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(1.5),
    marginBottom: theme.spacing(1),
    display: 'flex',
    alignItems: 'center'
  },
  stepNumber: {
    backgroundColor: theme.palette.primary.main,
    color: theme.palette.primary.contrastText,
    borderRadius: '50%',
    width: 24,
    height: 24,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: theme.spacing(2),
    fontSize: '0.875rem',
    fontWeight: 600
  },
  stateItem: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: `1px solid ${theme.palette.divider}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(2),
    marginBottom: theme.spacing(1)
  },
  checklistSection: {
    backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5',
    border: `1px solid ${theme.palette.divider}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(2)
  },
  fileStructure: {
    backgroundColor: theme.palette.type === 'dark' ? '#0d1117' : '#f8f9fa',
    border: `1px solid ${theme.palette.divider}`,
    borderRadius: theme.spacing(1),
    padding: theme.spacing(2),
    marginTop: theme.spacing(1)
  },
  tabs: {
    borderBottom: `1px solid ${theme.palette.divider}`,
    '& .MuiTab-root': {
      color: theme.palette.text.secondary,
      '&.Mui-selected': {
        color: theme.palette.primary.main
      }
    },
    '& .MuiTabs-indicator': {
      backgroundColor: theme.palette.primary.main
    }
  }
}));

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`flowchart-tabpanel-${index}`}
      aria-labelledby={`flowchart-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box p={3}>
          {children}
        </Box>
      )}
    </div>
  );
}

const FlowchartSection = () => {
  const classes = useStyles();
  const theme = useTheme();
  const { darkMode } = useCustomTheme();
  const [tabValue, setTabValue] = useState(0);

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const mainFlowSteps = [
    {
      title: 'Sistema Smart Atendimento',
      description: 'Ponto de entrada do sistema',
      icon: <SettingsIcon />
    },
    {
      title: 'Verifica√ß√£o de Plano',
      description: 'company.plan.ai_agent_enabled?',
      icon: <CheckIcon />,
      isDecision: true
    },
    {
      title: 'Minhas Conex√µes',
      description: 'Usu√°rio acessa tela de conex√µes',
      icon: <MessageIcon />
    },
    {
      title: 'Bot√£o "Treinar IA"',
      description: 'Vis√≠vel se plano permite',
      icon: <TrainingIcon />
    },
    {
      title: 'Modal de Treinamento',
      description: 'Formul√°rio simples da empresa',
      icon: <RobotIcon />
    },
    {
      title: 'PEPE Ativado',
      description: 'IA pronta para atender',
      icon: <CheckIcon />
    }
  ];

  const trainingSequence = [
    'Usu√°rio ‚Üí Frontend: Clica "Treinar IA"',
    'Frontend ‚Üí Usu√°rio: Abre modal',
    'Usu√°rio ‚Üí Frontend: Preenche dados',
    'Frontend ‚Üí Backend: POST /ai-training/simple',
    'Backend ‚Üí Database: Salva dados',
    'Backend ‚Üí Database: Gera embeddings',
    'Backend ‚Üí Database: Ativa PEPE',
    'Backend ‚Üí Frontend: Sucesso',
    'Frontend ‚Üí Usu√°rio: "PEPE ativado!"'
  ];

  const attendanceSequence = [
    'WhatsApp ‚Üí Backend: Nova mensagem',
    'Backend ‚Üí Database: Busca ticket',
    'Backend ‚Üí Backend: Chatbot b√°sico',
    'WhatsApp ‚Üí Backend: Cliente escolhe setor',
    'Backend ‚Üí Database: Verifica PEPE ativo',
    'Backend ‚Üí Database: PEPE assume ticket',
    'Backend ‚Üí Database: Busca dados treinamento',
    'Backend ‚Üí Database: Gera embedding pergunta',
    'Backend ‚Üí Database: Busca similaridade',
    'Backend ‚Üí DeepSeek API: Envia prompt',
    'DeepSeek API ‚Üí Backend: Resposta IA',
    'Backend ‚Üí WhatsApp: Envia resposta'
  ];

  const systemStates = [
    {
      icon: 'üö´',
      title: 'Sem IA',
      description: 'Plano n√£o permite ‚Üí Fluxo normal sem PEPE'
    },
    {
      icon: '‚öôÔ∏è',
      title: 'N√£o Treinado',
      description: 'IA permitida mas n√£o configurada ‚Üí Bot√£o "Treinar IA"'
    },
    {
      icon: '‚úÖ',
      title: 'PEPE Ativo',
      description: 'IA treinada e funcionando ‚Üí Processa mensagens'
    },
    {
      icon: '‚è∏Ô∏è',
      title: 'IA Pausada',
      description: 'Operador pausou ‚Üí Aguarda reativa√ß√£o'
    },
    {
      icon: 'üë§',
      title: 'Atendimento Humano',
      description: 'Humano assumiu controle ‚Üí PEPE inativo'
    }
  ];

  const decisionPoints = [
    {
      title: 'Verifica√ß√£o de Plano',
      code: `if (company.plan.ai_agent_enabled) {
  // Mostra bot√£o "Treinar IA"
} else {
  // Esconde bot√£o ou mostra desabilitado
}`
    },
    {
      title: 'Ativa√ß√£o do PEPE',
      code: `if (ticket.queueId && !ticket.userId && whatsapp.ai_enabled) {
  // PEPE assume o ticket
} else {
  // Fluxo normal para "Aguardando"
}`
    },
    {
      title: 'Busca por Similaridade',
      code: `if (similarityScore >= 0.7) {
  // Usa contexto encontrado
} else {
  // Transfere para humano
}`
    },
    {
      title: 'Controle de IA',
      code: `if (aiSession.isPaused) {
  // N√£o processa com IA
} else {
  // PEPE pode processar
}`
    }
  ];

  const checklistItems = [
    {
      category: 'Configura√ß√£o',
      items: [
        'Par√¢metro ai_agent_enabled nos planos',
        'Usu√°rio PEPE no sistema',
        'Extens√£o pgvector no PostgreSQL'
      ]
    },
    {
      category: 'Treinamento',
      items: [
        'Modal de treinamento na tela Conex√µes',
        'API de salvamento de dados',
        'Gera√ß√£o de embeddings locais',
        'Ativa√ß√£o autom√°tica do PEPE'
      ]
    },
    {
      category: 'Processamento',
      items: [
        'Integra√ß√£o com DeepSeek API',
        'Busca por similaridade vetorial',
        'Gera√ß√£o de respostas contextuais',
        'Sistema de fallback para humanos'
      ]
    },
    {
      category: 'Interface',
      items: [
        'Nova aba "Pepe AI" nos atendimentos',
        'Controles de pausa/retomada',
        'Indicadores visuais de IA ativa',
        'Alertas para interven√ß√£o humana'
      ]
    }
  ];

  const fileStructure = {
    backend: [
      'src/services/AIServices/PepeAIService.ts',
      'src/services/AIServices/EmbeddingService.ts',
      'src/services/AIServices/DeepSeekService.ts',
      'src/models/AITrainingSimple.ts',
      'src/models/AIEmbeddingLocal.ts',
      'src/controllers/AITrainingController.ts',
      'src/routes/aiTrainingRoutes.ts'
    ],
    frontend: [
      'pages/Connections/TrainingModal.tsx',
      'pages/Connections/TrainAIButton.tsx',
      'pages/Tickets/PepeAITab.tsx',
      'pages/Tickets/AIControlPanel.tsx'
    ],
    database: [
      'ai_training_simple - Dados de treinamento',
      'ai_embeddings_local - Embeddings vetoriais',
      'users - Usu√°rio PEPE',
      'plans - Par√¢metro ai_agent_enabled'
    ]
  };

  return (
    <div className={classes.section}>
      <Typography variant="h4" className={classes.title}>
        <FlowchartIcon style={{ marginRight: 16, verticalAlign: 'middle' }} />
        Fluxograma Completo - Integra√ß√£o Agente PEPE
      </Typography>

      <Typography variant="body1" paragraph>
        Este fluxograma mostra todo o processo de integra√ß√£o do PEPE, desde a configura√ß√£o 
        inicial at√© o atendimento automatizado com controles humanos.
      </Typography>

      <Tabs value={tabValue} onChange={handleTabChange} className={classes.tabs}>
        <Tab label="Fluxo Principal" />
        <Tab label="Etapas Detalhadas" />
        <Tab label="Fluxo de Dados" />
        <Tab label="Estados do Sistema" />
        <Tab label="Implementa√ß√£o" />
      </Tabs>

      <TabPanel value={tabValue} index={0}>
        <Typography variant="h5" className={classes.subtitle}>
          üîÑ Fluxo Principal de Integra√ß√£o
        </Typography>

        <Grid container spacing={2}>
          {mainFlowSteps.map((step, index) => (
            <Grid item xs={12} key={index}>
              <div className={step.isDecision ? classes.decisionBox : classes.flowStep}>
                <Box display="flex" alignItems="center" justifyContent="center" mb={1}>
                  {step.icon}
                  <Typography variant="h6" style={{ marginLeft: 8 }}>
                    {step.title}
                  </Typography>
                </Box>
                <Typography variant="body2" style={{ color: '#b0b0b0' }}>
                  {step.description}
                </Typography>
              </div>
              
              {index < mainFlowSteps.length - 1 && (
                <div className={classes.flowArrow}>
                  <ArrowIcon />
                </div>
              )}

              {step.isDecision && (
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <div className={classes.yesPath}>
                      <Typography variant="body2" style={{ color: '#4caf50' }}>
                        ‚úÖ Sim ‚Üí Continua fluxo
                      </Typography>
                    </div>
                  </Grid>
                  <Grid item xs={6}>
                    <div className={classes.noPath}>
                      <Typography variant="body2" style={{ color: '#f44336' }}>
                        ‚ùå N√£o ‚Üí Fluxo normal
                      </Typography>
                    </div>
                  </Grid>
                </Grid>
              )}
            </Grid>
          ))}
        </Grid>
      </TabPanel>

      <TabPanel value={tabValue} index={1}>
        <Typography variant="h5" className={classes.subtitle}>
          üìã Etapas Detalhadas do Fluxograma
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <div className={classes.stageCard}>
              <Typography variant="h6" className={classes.stageTitle}>
                1Ô∏è‚É£ Configura√ß√£o Inicial
              </Typography>
              <Typography variant="body2" style={{ fontWeight: 600, marginBottom: 8 }}>
                Admin do Sistema:
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Acessa Configura√ß√µes > Planos"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Habilita ai_agent_enabled = true"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Empresa ganha acesso ao PEPE"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
              </List>
            </div>
          </Grid>

          <Grid item xs={12} md={6}>
            <div className={classes.stageCard}>
              <Typography variant="h6" className={classes.stageTitle}>
                2Ô∏è‚É£ Treinamento do PEPE
              </Typography>
              <Typography variant="body2" style={{ fontWeight: 600, marginBottom: 8 }}>
                Usu√°rio da Empresa:
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Acessa 'Minhas Conex√µes'"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Clica bot√£o 'Treinar IA'"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Preenche formul√°rio da empresa"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="PEPE √© automaticamente ativado"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
              </List>
            </div>
          </Grid>

          <Grid item xs={12} md={6}>
            <div className={classes.stageCard}>
              <Typography variant="h6" className={classes.stageTitle}>
                3Ô∏è‚É£ Processamento de Mensagens
              </Typography>
              <Typography variant="body2" style={{ fontWeight: 600, marginBottom: 8 }}>
                Fluxo Autom√°tico:
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Nova mensagem WhatsApp chega"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Chatbot b√°sico apresenta setores"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="PEPE assume o ticket automaticamente"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
              </List>
            </div>
          </Grid>

          <Grid item xs={12} md={6}>
            <div className={classes.stageCard}>
              <Typography variant="h6" className={classes.stageTitle}>
                4Ô∏è‚É£ Controles Operacionais
              </Typography>
              <Typography variant="body2" style={{ fontWeight: 600, marginBottom: 8 }}>
                Interven√ß√£o Humana:
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <PauseIcon style={{ color: '#ff9800', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Atendente pode pausar PEPE"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <PersonIcon style={{ color: '#2196f3', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Atendente pode assumir controle"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon style={{ minWidth: 32 }}>
                    <WarningIcon style={{ color: '#f44336', fontSize: 20 }} />
                  </ListItemIcon>
                  <ListItemText 
                    primary="PEPE transfere quando n√£o consegue"
                    primaryTypographyProps={{ variant: 'body2' }}
                  />
                </ListItem>
              </List>
            </div>
          </Grid>
        </Grid>
      </TabPanel>

      <TabPanel value={tabValue} index={2}>
        <Typography variant="h5" className={classes.subtitle}>
          üîÑ Fluxo de Dados
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Card style={{ 
              backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5', 
              border: `1px solid ${theme.palette.primary.main}` 
            }}>
              <CardContent>
                <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
                  Sequ√™ncia de Treinamento
                </Typography>
                {trainingSequence.map((step, index) => (
                  <div key={index} className={classes.sequenceStep}>
                    <div className={classes.stepNumber}>{index + 1}</div>
                    <Typography variant="body2">{step}</Typography>
                  </div>
                ))}
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={12} md={6}>
            <Card style={{ 
              backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5', 
              border: '1px solid #4caf50' 
            }}>
              <CardContent>
                <Typography variant="h6" style={{ color: '#4caf50', marginBottom: 16 }}>
                  Sequ√™ncia de Atendimento
                </Typography>
                {attendanceSequence.map((step, index) => (
                  <div key={index} className={classes.sequenceStep}>
                    <div className={classes.stepNumber}>{index + 1}</div>
                    <Typography variant="body2">{step}</Typography>
                  </div>
                ))}
              </CardContent>
            </Card>
          </Grid>
        </Grid>

        <Typography variant="h5" className={classes.subtitle}>
          üéØ Pontos de Decis√£o Cr√≠ticos
        </Typography>

        <Grid container spacing={2}>
          {decisionPoints.map((point, index) => (
            <Grid item xs={12} md={6} key={index}>
              <Card style={{ 
                backgroundColor: theme.palette.type === 'dark' ? '#2d2d2d' : '#f5f5f5', 
                border: `1px solid ${theme.palette.divider}` 
              }}>
                <CardContent>
                  <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
                    {point.title}
                  </Typography>
                  <CodeBlock code={point.code} language="javascript" />
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </TabPanel>

      <TabPanel value={tabValue} index={3}>
        <Typography variant="h5" className={classes.subtitle}>
          üìä Estados do Sistema
        </Typography>

        <Grid container spacing={2}>
          {systemStates.map((state, index) => (
            <Grid item xs={12} md={6} lg={4} key={index}>
              <div className={classes.stateItem}>
                <Box display="flex" alignItems="center" mb={1}>
                  <Typography variant="h4" style={{ marginRight: 16 }}>
                    {state.icon}
                  </Typography>
                  <Typography variant="h6" style={{ color: theme.palette.text.primary }}>
                    {state.title}
                  </Typography>
                </Box>
                <Typography variant="body2" style={{ color: theme.palette.text.secondary }}>
                  {state.description}
                </Typography>
              </div>
            </Grid>
          ))}
        </Grid>
      </TabPanel>

      <TabPanel value={tabValue} index={4}>
        <Typography variant="h5" className={classes.subtitle}>
          üìã Checklist de Implementa√ß√£o
        </Typography>

        <Grid container spacing={3}>
          {checklistItems.map((section, index) => (
            <Grid item xs={12} md={6} key={index}>
              <div className={classes.checklistSection}>
                <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
                  ‚úÖ {section.category}
                </Typography>
                <List dense>
                  {section.items.map((item, itemIndex) => (
                    <ListItem key={itemIndex}>
                      <ListItemIcon style={{ minWidth: 32 }}>
                        <CheckIcon style={{ color: '#4caf50', fontSize: 20 }} />
                      </ListItemIcon>
                      <ListItemText 
                        primary={item}
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                  ))}
                </List>
              </div>
            </Grid>
          ))}
        </Grid>

        <Typography variant="h5" className={classes.subtitle}>
          üóÇÔ∏è Estrutura de Arquivos
        </Typography>

        <Grid container spacing={3}>
          <Grid item xs={12} md={4}>
            <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
              Backend:
            </Typography>
            <div className={classes.fileStructure}>
              {fileStructure.backend.map((file, index) => (
                <Typography key={index} variant="body2" style={{ 
                  fontFamily: 'monospace', 
                  color: theme.palette.text.primary,
                  marginBottom: 4
                }}>
                  {file}
                </Typography>
              ))}
            </div>
          </Grid>

          <Grid item xs={12} md={4}>
            <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
              Frontend:
            </Typography>
            <div className={classes.fileStructure}>
              {fileStructure.frontend.map((file, index) => (
                <Typography key={index} variant="body2" style={{ 
                  fontFamily: 'monospace', 
                  color: theme.palette.text.primary,
                  marginBottom: 4
                }}>
                  {file}
                </Typography>
              ))}
            </div>
          </Grid>

          <Grid item xs={12} md={4}>
            <Typography variant="h6" style={{ color: theme.palette.primary.main, marginBottom: 16 }}>
              Database:
            </Typography>
            <div className={classes.fileStructure}>
              {fileStructure.database.map((file, index) => (
                <Typography key={index} variant="body2" style={{ 
                  fontFamily: 'monospace', 
                  color: theme.palette.text.primary,
                  marginBottom: 4
                }}>
                  {file}
                </Typography>
              ))}
            </div>
          </Grid>
        </Grid>
      </TabPanel>
    </div>
  );
};

export default FlowchartSection;