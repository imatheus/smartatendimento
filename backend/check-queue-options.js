const { Sequelize } = require('sequelize');

// Configura√ß√£o do banco de dados
const sequelize = new Sequelize({
  dialect: 'postgres',
  host: 'localhost',
  port: 5432,
  database: 'smart_atendimento_db',
  username: 'postgres',
  password: 'root',
  logging: console.log
});

async function checkAndCreateQueueOptions() {
  try {
    console.log('üîç Verificando op√ß√µes de chatbot para os setores...\n');

    // 1. Verificar setores existentes
    const [queues] = await sequelize.query(`
      SELECT id, name, "greetingMessage" FROM "Queues" WHERE "companyId" = 1
    `);
    
    console.log(`üè¢ Setores encontrados: ${queues.length}`);
    queues.forEach(queue => {
      console.log(`   - ID: ${queue.id}, Nome: ${queue.name}`);
    });
    console.log('');

    // 2. Verificar op√ß√µes existentes para cada setor
    for (const queue of queues) {
      const [options] = await sequelize.query(`
        SELECT id, title, option, message, "parentId" 
        FROM "QueueOptions" 
        WHERE "queueId" = ${queue.id} AND "parentId" IS NULL
        ORDER BY "option"
      `);
      
      console.log(`üìã Op√ß√µes para o setor "${queue.name}": ${options.length}`);
      options.forEach(option => {
        console.log(`   - Op√ß√£o: ${option.option}, T√≠tulo: ${option.title}`);
      });

      // 3. Se n√£o h√° op√ß√µes, criar algumas de exemplo
      if (options.length === 0) {
        console.log(`‚ö†Ô∏è  Setor "${queue.name}" n√£o tem op√ß√µes de chatbot!`);
        console.log(`üîß Criando op√ß√µes de exemplo...\n`);

        // Criar op√ß√µes baseadas no nome do setor
        let optionsToCreate = [];
        
        if (queue.name.toLowerCase().includes('financeiro')) {
          optionsToCreate = [
            { option: '1', title: '2¬™ Via de Boleto', message: 'Voc√™ escolheu 2¬™ Via de Boleto. Em breve um atendente entrar√° em contato.' },
            { option: '2', title: 'Atraso no Pagamento', message: 'Voc√™ escolheu Atraso no Pagamento. Em breve um atendente entrar√° em contato.' },
            { option: '3', title: 'Negocia√ß√£o de D√©bitos', message: 'Voc√™ escolheu Negocia√ß√£o de D√©bitos. Em breve um atendente entrar√° em contato.' }
          ];
        } else if (queue.name.toLowerCase().includes('teste')) {
          optionsToCreate = [
            { option: '1', title: 'Suporte T√©cnico', message: 'Voc√™ escolheu Suporte T√©cnico. Em breve um atendente entrar√° em contato.' },
            { option: '2', title: 'Informa√ß√µes Gerais', message: 'Voc√™ escolheu Informa√ß√µes Gerais. Em breve um atendente entrar√° em contato.' }
          ];
        } else {
          // Op√ß√µes gen√©ricas
          optionsToCreate = [
            { option: '1', title: 'Informa√ß√µes', message: 'Voc√™ escolheu Informa√ß√µes. Em breve um atendente entrar√° em contato.' },
            { option: '2', title: 'Suporte', message: 'Voc√™ escolheu Suporte. Em breve um atendente entrar√° em contato.' }
          ];
        }

        for (const optionData of optionsToCreate) {
          await sequelize.query(`
            INSERT INTO "QueueOptions" ("queueId", "parentId", "title", "message", "option", "createdAt", "updatedAt")
            VALUES (${queue.id}, NULL, '${optionData.title}', '${optionData.message}', '${optionData.option}', NOW(), NOW())
          `);
          console.log(`‚úÖ Op√ß√£o criada: [${optionData.option}] - ${optionData.title}`);
        }
        console.log('');
      }

      // 4. Atualizar mensagem de sauda√ß√£o do setor se estiver vazia
      if (!queue.greetingMessage || queue.greetingMessage.trim() === '') {
        const greetingMessage = `Ol√°! Voc√™ est√° no setor ${queue.name}. Escolha uma das op√ß√µes abaixo:`;
        await sequelize.query(`
          UPDATE "Queues" 
          SET "greetingMessage" = '${greetingMessage}', "updatedAt" = NOW()
          WHERE id = ${queue.id}
        `);
        console.log(`‚úÖ Mensagem de sauda√ß√£o atualizada para o setor "${queue.name}"`);
      }
    }

    // 5. Verificar novamente as op√ß√µes ap√≥s cria√ß√£o
    console.log('\nüìä Verifica√ß√£o final das op√ß√µes:');
    for (const queue of queues) {
      const [finalOptions] = await sequelize.query(`
        SELECT id, title, option, message 
        FROM "QueueOptions" 
        WHERE "queueId" = ${queue.id} AND "parentId" IS NULL
        ORDER BY "option"
      `);
      
      console.log(`\nüè¢ Setor: ${queue.name} (${finalOptions.length} op√ß√µes)`);
      finalOptions.forEach(option => {
        console.log(`   [${option.option}] - ${option.title}`);
      });
    }

    console.log('\n‚úÖ Verifica√ß√£o e cria√ß√£o de op√ß√µes conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    await sequelize.close();
  }
}

// Executar a verifica√ß√£o
checkAndCreateQueueOptions();